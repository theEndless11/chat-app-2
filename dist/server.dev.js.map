{"version":3,"sources":["server.js"],"names":["require","Server","module","exports","req","res","socket","server","io","on","console","log","data","time","Date","toLocaleTimeString","emit","username","message","to","room","leave","join","end"],"mappings":";;eAAmBA,OAAO,CAAC,WAAD,C;IAAlBC,M,YAAAA,M;;AAERC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAI,CAACA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkBC,EAAvB,EAA2B;AACzB,QAAMA,EAAE,GAAG,IAAIP,MAAJ,CAAWI,GAAG,CAACC,MAAJ,CAAWC,MAAtB,CAAX;AAEAC,IAAAA,EAAE,CAACC,EAAH,CAAM,YAAN,EAAoB,UAACH,MAAD,EAAY;AAC9BI,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAD8B,CAG9B;;AACAL,MAAAA,MAAM,CAACG,EAAP,CAAU,aAAV,EAAyB,UAACG,IAAD,EAAU;AACjC,YAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAb;AACAT,QAAAA,MAAM,CAACU,IAAP,CAAY,gBAAZ,EAA8B;AAC5BC,UAAAA,QAAQ,EAAEL,IAAI,CAACK,QADa;AAE5BC,UAAAA,OAAO,EAAEN,IAAI,CAACM,OAFc;AAG5BL,UAAAA,IAAI,EAAEA;AAHsB,SAA9B,EAFiC,CAQjC;;AACAL,QAAAA,EAAE,CAACW,EAAH,CAAMP,IAAI,CAACQ,IAAX,EAAiBJ,IAAjB,CAAsB,gBAAtB,EAAwC;AACtCC,UAAAA,QAAQ,EAAEL,IAAI,CAACK,QADuB;AAEtCC,UAAAA,OAAO,EAAEN,IAAI,CAACM,OAFwB;AAGtCL,UAAAA,IAAI,EAAEA;AAHgC,SAAxC;AAKD,OAdD,EAJ8B,CAoB9B;;AACAP,MAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,UAACW,IAAD,EAAU;AAChCd,QAAAA,MAAM,CAACe,KAAP,CAAa,QAAb;AACAf,QAAAA,MAAM,CAACe,KAAP,CAAa,SAAb;AACAf,QAAAA,MAAM,CAACgB,IAAP,CAAYF,IAAZ;AACD,OAJD,EArB8B,CA2B9B;;AACAd,MAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAFD;AAGD,KA/BD;AAiCAN,IAAAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkBC,EAAlB,GAAuBA,EAAvB,CApCyB,CAoCG;AAC7B;;AACDH,EAAAA,GAAG,CAACkB,GAAJ;AACD,CAxCD","sourcesContent":["const { Server } = require(\"socket.io\");\r\n\r\nmodule.exports = (req, res) => {\r\n  if (!res.socket.server.io) {\r\n    const io = new Server(res.socket.server);\r\n\r\n    io.on(\"connection\", (socket) => {\r\n      console.log(\"A user connected\");\r\n\r\n      // Handle sending a message\r\n      socket.on(\"sendMessage\", (data) => {\r\n        const time = new Date().toLocaleTimeString();\r\n        socket.emit(\"receiveMessage\", {\r\n          username: data.username,\r\n          message: data.message,\r\n          time: time,\r\n        });\r\n\r\n        // Broadcast to all clients in the same room\r\n        io.to(data.room).emit(\"receiveMessage\", {\r\n          username: data.username,\r\n          message: data.message,\r\n          time: time,\r\n        });\r\n      });\r\n\r\n      // Room handling (optional)\r\n      socket.on(\"switchRoom\", (room) => {\r\n        socket.leave(\"public\");\r\n        socket.leave(\"private\");\r\n        socket.join(room);\r\n      });\r\n\r\n      // User disconnecting\r\n      socket.on(\"disconnect\", () => {\r\n        console.log(\"User disconnected\");\r\n      });\r\n    });\r\n\r\n    res.socket.server.io = io;  // Store the reference to the WebSocket server\r\n  }\r\n  res.end();\r\n};\r\n\r\n"],"file":"server.dev.js"}